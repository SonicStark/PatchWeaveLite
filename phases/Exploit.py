#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import time
from common import Definitions
from tools import Emitter, Builder, Logger
from common.Utilities import error_exit

FILE_EXPLOIT_OUTPUT_A = ""
FILE_EXPLOIT_OUTPUT_C = ""
donor_exit_code = ""
target_exit_code = ""
donor_crashed = ""
target_crashed = ""


def build_projects():
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    Builder.build_asan()


def test_exploits():
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    global donor_exit_code, target_exit_code, donor_crashed, target_crashed
    global FILE_EXPLOIT_OUTPUT_A, FILE_EXPLOIT_OUTPUT_C

    FILE_EXPLOIT_OUTPUT_A = Definitions.DIRECTORY_OUTPUT + "/exploit-log-a"
    FILE_EXPLOIT_OUTPUT_C = Definitions.DIRECTORY_OUTPUT + "/exploit-log-c"
    Emitter.sub_title("executing exploits")
    Emitter.normal(Definitions.Project_A.path)
    donor_exit_code, donor_output = run_exploit(Definitions.VALUE_EXPLOIT_A, Definitions.Project_A.path, Definitions.VALUE_PATH_POC, FILE_EXPLOIT_OUTPUT_A)
    if any(crash_word in str(donor_output).lower() for crash_word in crash_word_list):
        donor_crashed = True
        Emitter.normal("\tprogram crashed with exit code " + str(donor_exit_code))
    else:
        if donor_exit_code != 0:
            Emitter.normal("\tprogram exited with exit code " + str(donor_exit_code))
            Emitter.program_output(donor_output)
        else:
            error_exit("program did not crash!!")

    Emitter.normal(Definitions.Project_C.path)
    target_exit_code, target_output = run_exploit(Definitions.VALUE_EXPLOIT_C, Definitions.Project_C.path, Definitions.VALUE_PATH_POC, FILE_EXPLOIT_OUTPUT_C)
    if any(crash_word in str(target_output).lower() for crash_word in crash_word_list):
        target_crashed = True
        Emitter.normal("\tprogram crashed with exit code " + str(target_exit_code))
    else:
        if donor_exit_code != 0:
            Emitter.normal("\tprogram exited with exit code " + str(target_exit_code))
            Emitter.program_output(target_output)
        else:
            error_exit("program did not crash!!")


def safe_exec(function_def, title, *args):
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    start_time = time.time()
    Emitter.sub_title(title)
    description = title[0].lower() + title[1:]
    try:
        Logger.information("running " + str(function_def))
        if not args:
            result = function_def()
        else:
            result = function_def(*args)
        duration = str(time.time() - start_time)
        Emitter.success("\n\tSuccessful " + description + ", after " + duration + " seconds.")
    except Exception as exception:
        duration = str(time.time() - start_time)
        Emitter.error("Crash during " + description + ", after " + duration + " seconds.")
        error_exit(exception, "Unexpected error during " + description + ".")
    return result


def exploit():
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    Emitter.title("Exploiting vulnerability")
    safe_exec(build_projects, "building binaries")
    safe_exec(test_exploits, "testing exploit case")
