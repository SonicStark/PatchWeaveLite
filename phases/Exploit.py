#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import time
from common import Definitions, Values
from tools import Emitter, Builder, Logger, Exploiter, Collector, Oracle
from common.Utilities import error_exit

FILE_EXPLOIT_OUTPUT_A = ""
FILE_EXPLOIT_OUTPUT_C = ""

donor_exit_code = ""
target_exit_code = ""
donor_crashed = ""
target_crashed = ""


def test_exploits():
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    global donor_exit_code, target_exit_code, donor_crashed, target_crashed
    global FILE_EXPLOIT_OUTPUT_A, FILE_EXPLOIT_OUTPUT_C

    FILE_EXPLOIT_OUTPUT_A = Definitions.DIRECTORY_OUTPUT + "/exploit-log-a"
    exploit_command = Values.EXPLOIT_A
    project_path = Values.PATH_A
    poc_path = Values.PATH_POC
    Exploiter.run_exploit(exploit_command,
                          project_path,
                          poc_path,
                          FILE_EXPLOIT_OUTPUT_A)

    FILE_EXPLOIT_OUTPUT_C = Definitions.DIRECTORY_OUTPUT + "/exploit-log-c"
    exploit_command = Values.EXPLOIT_C
    project_path = Values.PATH_C
    poc_path = Values.PATH_POC
    Exploiter.run_exploit(exploit_command,
                          project_path,
                          poc_path,
                          FILE_EXPLOIT_OUTPUT_C)


def collect_exploit_info():
    global donor_exit_code, target_exit_code
    global donor_crashed, target_crashed
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    Emitter.sub_sub_title(Values.PATH_A)
    donor_exit_code = Collector.collect_exploit_return_code(FILE_EXPLOIT_OUTPUT_A)
    donor_output = Collector.collect_exploit_output(FILE_EXPLOIT_OUTPUT_A)
    donor_crashed = Oracle.did_program_crash(donor_output)
    Emitter.sub_sub_title(Values.PATH_C)
    target_exit_code = Collector.collect_exploit_return_code(FILE_EXPLOIT_OUTPUT_C)
    target_output = Collector.collect_exploit_output(FILE_EXPLOIT_OUTPUT_C)
    target_crashed = Oracle.did_program_crash(target_output)
    # print(target_crashed, donor_crashed)
    # print(donor_output)
    # print(target_output)


def safe_exec(function_def, title, *args):
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    start_time = time.time()
    Emitter.sub_title(title)
    description = title[0].lower() + title[1:]
    try:
        Logger.information("running " + str(function_def))
        if not args:
            result = function_def()
        else:
            result = function_def(*args)
        duration = str(time.time() - start_time)
        Emitter.success("\n\tSuccessful " + description + ", after " + duration + " seconds.")
    except Exception as exception:
        duration = str(time.time() - start_time)
        Emitter.error("Crash during " + description + ", after " + duration + " seconds.")
        error_exit(exception, "Unexpected error during " + description + ".")
    return result


def exploit():
    Logger.trace(__name__ + ":" + sys._getframe().f_code.co_name, locals())
    Emitter.title("Exploiting vulnerability")
    if not Values.SKIP_EXPLOIT:
        if Values.ASAN_FLAG == "":
            safe_exec(Builder.build_normal, "building binaries")
        else:
            safe_exec(Builder.build_asan, "building binaries")
        safe_exec(test_exploits, "testing exploit case")
    safe_exec(collect_exploit_info, "collecting exploit information")
